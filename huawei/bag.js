// 0-1背包问题

// 问题描述：有一个背包可以装物品的总重量为W，现有N个物品，每个物品中w[i]，价值v[i]，用背包装物品，能装的最大价值是多少？

// 定义状态转移数组dp[i][j]，表示前i个物品，背包重量为j的情况下能装的最大价值。

// 例如，dp[3][4]=6，表示用前3个物品装入重量为4的背包所能获得的最大价值为6，此时并不是3个物品全部装入，而是3个物品满足装入背包的条件下的最大价值。

// 状态转移方程：

// dp[i][j] = max(dp[i-1][j], dp[i-1][j-w[i]]+v[i])

// dp[i-1][j]表示当前物品不放入背包，dp[i-1][j-w[i]]+v[i]表示当前物品放入背包，即当前第i个物品要么放入背包，要么不放入背包。

let dp = new Array(N + 1).fill(new Array(W + 1).fill(0))

for (let i = 1; i <= n; i++) {
    for (let j = 1; j <= W; j++) {
        if (j < w[i]) {
            dp[i][j] = dp[i - 1][j]
        } else {
            dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - w[i]] + v[i])
        }
    }
}